#include <stdio.h>
#include <stdlib.h>
#define STACK_SIZE 20
typedef char element;
//스택 구조체 정의
typedef struct {
	element data[STACK_SIZE];
	int top;
}Stack;

int checkTest(char expr[]);
void initStack( Stack *s );
int isFull( Stack *s );
int isEmpty( Stack *s );
void push( Stack *s, element data );
element pop( Stack *s );

int main(){
	int i;
	Stack s;
	char expr[20];
	
	printf("괄호포함 수식 입력 : ");
	scanf("%s", expr);
	if (checkTest(expr)) printf("성공");
	else printf("실패");
	return 0;
	
}
// 스택 초기화 함수
void initStack(Stack *s) {
    s->top = -1; // 스택의 top을 -1로 초기화하여 비어있는 상태로 설정합니다.
}

// 스택이 가득 차 있는지 확인하는 함수
int isFull(Stack *s) {
    return s->top == STACK_SIZE - 1; // 스택의 top이 배열 크기 - 1과 같으면 스택이 가득 찬 상태입니다.
}

// 스택이 비어 있는지 확인하는 함수
int isEmpty(Stack *s) {
    return s->top == -1; // 스택의 top이 -1과 같으면 스택이 비어 있는 상태입니다.
}

// 스택에 데이터를 푸시하는 함수
void push(Stack *s, element c) {
    if (isFull(s)) {
        printf("스택이 가득 찼습니다.\n");
        return;
    }
    s->data[++s->top] = c; // 스택의 top을 증가시킨 후 데이터를 스택에 저장합니다.
}

// 스택에서 데이터를 팝하는 함수
element pop(Stack *s) {
    if (isEmpty(s)) {
        printf("스택이 비어 있습니다.\n");
        return 0;
    }
    return s->data[s->top--]; // 스택의 top 위치의 데이터를 반환하고 top을 감소시킵니다.
}

int checkTest(char expr[]) {
    int i;
    Stack s;
    initStack(&s);
    char ch, open_ch;

    for (i = 0; expr[i] != '\0'; i++) {
        ch = expr[i];

        switch (ch) {
            case '(':
            case '[':
            case '{':
                push(&s, ch); // 여는 괄호는 스택에 푸시
                break;
            case ')':
            case ']':
            case '}':
                if (isEmpty(&s))
                    return 0; // 닫는 괄호가 나왔는데 스택이 비어있으면 실패
                open_ch = pop(&s); // 스택에서 여는 괄호를 팝
                if ((open_ch == '(' && ch != ')') ||
                    (open_ch == '[' && ch != ']') ||
                    (open_ch == '{' && ch != '}')) {
                    return 0; // 괄호 짝이 맞지 않으면 실패
                }
                break;
        }
    }

    if (!isEmpty(&s))
        return 0; // 모든 괄호를 확인한 후에도 스택에 여는 괄호가 남아있으면 실패

    return 1; // 모든 조건을 통과하면 성공
}
