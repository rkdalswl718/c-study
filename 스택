#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#define MAX 100

typedef int element;
typedef struct {
    element data[MAX];
    int top;
} Stack;

void initStack(Stack* s) {
    s->top = -1;
}

int isEmpty(Stack* s) {
    return s->top == -1;
}

int isFull(Stack* s) {
    return s->top == MAX - 1;
}

void push(Stack* s, element c) {
    if (isFull(s)) {
        printf("Stack is full. Cannot push.\n");
    } else {
        s->data[++(s->top)] = c;
    }
}

element pop(Stack* s) {
    if (isEmpty(s)) {
        printf("Stack is empty. Cannot pop.\n");
        return -1;
    } else {
        return s->data[(s->top)--];
    }
}

int evaluateRPN(char expression[]) {
    Stack s;
    initStack(&s);

    for (int i = 0; expression[i] != '\0'; i++) {
        if (isdigit(expression[i])) {
            push(&s, expression[i] - '0'); // Convert character to integer
        } else if (expression[i] == ' ') {
            continue; // Ignore spaces
        } else {
            int operand2 = pop(&s);
            int operand1 = pop(&s);

            switch (expression[i]) {
                case '+':
                    push(&s, operand1 + operand2);
                    break;
                case '-':
                    push(&s, operand1 - operand2);
                    break;
                case '*':
                    push(&s, operand1 * operand2);
                    break;
                case '/':
                    push(&s, operand1 / operand2);
                    break;
                default:
                    printf("Invalid operator: %c\n", expression[i]);
                    return -1;
            }
        }
    }

    return pop(&s);
}

int main() {
    char expr[MAX];
    fgets(expr, MAX, stdin);

    int result = evaluateRPN(expr);
    if (result != -1) {
        printf("%d", result);
    }

    return 0;
}
